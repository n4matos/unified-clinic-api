###
# Arquivo de exemplo para testar a nova arquitetura multi-tenant
# Use com a extensão REST Client do VS Code ou similar
###

### Variáveis
@baseUrl = http://localhost:3000
@tenantId = clinic_test
@clientId = client_test
@clientSecret = secret_test

### 1. Criar um novo tenant
POST {{baseUrl}}/tenants
Content-Type: application/json

{
  "tenant_id": "{{tenantId}}",
  "client_id": "{{clientId}}",
  "client_secret": "{{clientSecret}}",
  "db_type": "pg",
  "db_host": "localhost",
  "db_port": 5432,
  "db_user": "user",
  "db_pass": "password",
  "db_name": "unified_clinic_clinics"
}

### 2. Listar todos os tenants
GET {{baseUrl}}/tenants

### 3. Fazer login com o tenant criado
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "client_id": "{{clientId}}",
  "client_secret": "{{clientSecret}}"
}

### 4. Usar o JWT retornado (substitua o token abaixo)
@jwtToken = YOUR_JWT_TOKEN_HERE

### 5. Health check geral
GET {{baseUrl}}/health

### 6. Health check do banco de usuários
GET {{baseUrl}}/health/configdb

### 7. Atualizar tenant
PUT {{baseUrl}}/tenants/{{tenantId}}
Content-Type: application/json

{
  "db_port": 5433
}

### 8. Deletar tenant
DELETE {{baseUrl}}/tenants/{{tenantId}}

### 9. Testes com tenants pré-configurados

### Login com clinic1 (Postgres)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "client_id": "client1",
  "client_secret": "secret1"
}

### Login com clinic2 (MySQL)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "client_id": "client2",
  "client_secret": "secret2"
}

### Login com clinic3 (SQL Server)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "client_id": "client3",
  "client_secret": "secret3"
}

### 10. Teste de autenticação com JWT
### Após obter o token no passo 3, você pode testá-lo em futuras rotas de negócio
### Por exemplo, quando implementar rotas de pacientes:
### GET {{baseUrl}}/patients
### Authorization: Bearer {{jwtToken}}
