@jwtToken = 

### Register User for Clinic 1
POST http://localhost:3000/auth/register
Content-Type: application/json

{
  "username": "user1_clinic1",
  "password": "password",
  "clinicId": "1"
}

### Register User for Clinic 2
POST http://localhost:3000/auth/register
Content-Type: application/json

{
  "username": "user2_clinic2",
  "password": "password",
  "clinicId": "2"
}

### Login for Clinic 1 User
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "username": "user1_clinic1",
  "password": "password"
}

### Login for Clinic 2 User
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "username": "user2_clinic2",
  "password": "password"
}

### List patients from Clinic 1 (PostgreSQL) with JWT
GET http://localhost:3000/patients
Accept: application/json
Authorization: Bearer {{jwtToken}}

### Create patient in Clinic 1 (PostgreSQL) with JWT
POST http://localhost:3000/patients
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
  "name": "Jo√£o Silva JWT",
  "email": "joao.jwt@exemplo.com",
  "phone": "11777777777",
  "birth_date": "1985-07-20"
}

### List patients from Clinic 2 (MySQL) with JWT
GET http://localhost:3000/patients
Accept: application/json
Authorization: Bearer {{jwtToken}}

### Create patient in Clinic 2 (MySQL) with JWT
POST http://localhost:3000/patients
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
  "name": "Maria Souza JWT",
  "email": "maria.jwt@exemplo.com",
  "phone": "21777777777",
  "birth_date": "1990-10-15"
}

### Test Zod validation (invalid request)
POST http://localhost:3000/patients
Content-Type: application/json
Authorization: Bearer {{jwtToken}}

{
  "name": "",
  "email": "invalid-email",
  "phone": "123"
}
